{"version":3,"file":"mod.js","sources":["../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {ArrayLikeObject} [out] - output array\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {ArrayLikeObject} output array\n*\n* @example\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw() {\n\tvar out;\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar a;\n\tvar b;\n\tvar t;\n\tvar k;\n\n\tif ( arguments.length === 3 ) {\n\t\tout = arguments[ 0 ];\n\t\ta = arguments[ 1 ];\n\t\tb = arguments[ 2 ];\n\t} else {\n\t\tout = [ 0, 0 ];\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t}\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\treturn NaN;\n\t}\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\tha = ( a >>> 16 ) >>> 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >>> 16 ) >>> 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tout[ 0 ] = ( ( ha*hb ) + w1 + k ) >>> 0; // compute the higher 32 bits and cast to an unsigned 32-bit integer\n\tout[ 1 ] = ( ( t << 16 ) + w3) >>> 0; // compute the lower 32 bits and cast to an unsigned 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two unsigned 32-bit integers and return an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @module @stdlib/math-base-ops-umuldw\n*\n* @example\n* var umuldw = require( '@stdlib/math-base-ops-umuldw' );\n*\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\n\n// MODULES //\n\nvar umuldw = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = umuldw;\n"],"names":["isnan","x","lib","out","w1","w3","ha","hb","la","lb","a","b","t","k","arguments","length","NaN"],"mappings":";;AA2CA,ICrBIA,EDcJ,SAAgBC,GACf,OAASA,GAAMA,GC+DhB,IC7DAC,EDMA,WACC,IAAIC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAWJ,OAT0B,IAArBC,UAAUC,QACdZ,EAAMW,UAAW,GACjBJ,EAAII,UAAW,GACfH,EAAIG,UAAW,KAEfX,EAAM,CAAE,EAAG,GACXO,EAAII,UAAW,GACfH,EAAIG,UAAW,IAEXd,EAAOU,IAAOV,EAAOW,GAClBK,KAYRX,GArDmB,OAoDnBO,GALAJ,GA/CmB,OA2CnBE,KAAO,MAIwB,IAG/BD,GAlDmB,OA4CnBE,KAAO,MAMwB,KAEb,MACa,EAK/BP,GAFAQ,GAVAN,EAAOI,IAAM,KAAS,GAUXD,GAFXI,EAAMD,IAAM,KAAS,KAEK,KAEb,KAAS,EAGtBC,GADAD,EAAQJ,GAXRD,EAAOI,IAAM,KAAS,KAjDH,MAyDZC,KAAwB,KAGJ,KACf,KAAS,EAErBT,EAAK,GAAUG,EAAGC,EAAOH,EAAKS,IAAQ,EACtCV,EAAK,IAAUS,GAAK,IAAOP,IAAQ,EAE5BF"}