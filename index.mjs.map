{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = [ 0, 0 ];\n* var v = umuldw( 0xAAAAAAAA, 0x55555555, out, 1, 0 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw(a, b, out, stride, offset ) {\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar t;\n\tvar k;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\tha = ( a >>> 16 ) >>> 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >>> 16 ) >>> 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tout[ offset ] = ( ( ha*hb ) + w1 + k ) >>> 0; // compute the higher 32 bits and cast to an unsigned 32-bit integer\n\tout[ offset + stride ] = ( ( t << 16 ) + w3) >>> 0; // compute the lower 32 bits and cast to an unsigned 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {Array<number>} output array\n*\n* @example\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw( a, b ) {\n\treturn fcn( a, b, [ 0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two unsigned 32-bit integers and return an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @module @stdlib/math-base-ops-umuldw\n*\n* @example\n* import umuldw from '@stdlib/math-base-ops-umuldw';\n*\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["umuldw","a","b","out","stride","offset","w1","w3","ha","hb","la","lb","t","k","isnan","NaN","fcn","setReadOnly","main","assign"],"mappings":";;0NAgDA,SAASA,EAAOC,EAAGC,EAAGC,EAAKC,EAAQC,GAClC,IAAIC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAKC,EAAOb,IAAOa,EAAOZ,IACzBC,EAAKE,GAAWU,IAChBZ,EAAKE,EAASD,GAAWW,IAClBZ,IAYRI,GA9CmB,OA6CnBK,GALAF,GAxCmB,OAoCnBT,KAAO,MAIwB,IAG/BU,GA3CmB,OAqCnBT,KAAO,MAMwB,KAEb,MACa,EAK/BI,GAFAM,GAVAJ,EAAOP,IAAM,KAAS,GAUXU,GAFXE,EAAMD,IAAM,KAAS,KAEK,KAEb,KAAS,EAGtBC,GADAD,EAAQF,GAXRD,EAAOP,IAAM,KAAS,KA1CH,MAkDZU,KAAwB,KAGJ,KACf,KAAS,EAErBT,EAAKE,GAAeG,EAAGC,EAAOH,EAAKO,IAAQ,EAC3CV,EAAKE,EAASD,IAAeQ,GAAK,IAAOL,IAAQ,EAE1CJ,EACR,CClDA,SAASH,EAAQC,EAAGC,GACnB,OAAOc,EAAKf,EAAGC,EAAG,CAAE,EAAG,GAAK,EAAG,EAChC,CCCAe,EAAAC,EAAA,SAAAC"}